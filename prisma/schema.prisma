generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

// ==================== USER MODELS ====================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  password      String? // Hashed password
  provider      String? // google, linkedin, etc.
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  profile                  UserProfile?
  subscription             Subscription?
  applications             Application[]
  scholarshipApplications  ScholarshipApplication[]
  financialAidApplications FinancialAidApplication[]
  essaySubmissions         EssaySubmission[]
  savedUniversities        University[] @relation("UserSavedUniversities")
  calendarEvents           CalendarEvent[]
  eventReminders           EventReminder[]
  essays                   Essay[]
  EssayCompletionLog       EssayCompletionLog[]
  CV                       CV[]

  @@map("users")
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique

  // Study preferences
  countries  String[] // Preferred countries for study
  courses    String[] // Desired fields (Engineering, Medicine, Data Science)
  studyLevel String? // masters, bachelors, phd, etc.

  // Academic information
  gpa            String? // GPA or percentage
  testScores     String? // SAT, GRE, etc. scores
  workExperience String? // Work experience description

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique

  // Subscription details
  plan         String // free, premium, pro
  status       String // active, cancelled, expired, trial
  billingCycle String? // monthly, yearly (null for free)

  // Trial information
  trialStartDate DateTime?
  trialEndDate   DateTime?

  // Subscription dates
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?

  // Payment processor references (no sensitive data stored)
  stripeCustomerId     String? // Reference to Stripe customer
  stripeSubscriptionId String? // Reference to Stripe subscription

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model PaymentEvent {
  id            String   @id @default(cuid())
  userId        String?
  eventType     String? // subscription_created, payment_succeeded, payment_failed, etc.
  plan          String? // premium, pro
  amount        Float? // Amount in cents
  currency      String   @default("USD")
  stripeEventId String? // Stripe webhook event ID
  createdAt     DateTime @default(now())

  @@map("payment_events")
}

// ==================== UNIVERSITY MODELS ====================

model University {
  id                         String   @id @default(cuid())
  universityName             String
  slug                       String   @unique
  city                       String
  state                      String?
  country                    String
  fullAddress                String?
  shortDescription           String?
  overview                   String?
  history                    String?
  missionStatement           String?
  visionStatement            String?
  accreditationDetails       String?
  whyChooseHighlights        String[]
  careerOutcomes             String?
  ftGlobalRanking            Int?
  ftRegionalRanking          Int?
  ftRankingYear              Int?
  usNewsRanking              Int?
  qsRanking                  Int?
  timesRanking               Int?
  acceptanceRate             Float?
  gmatAverageScore           Int?
  gmatScoreMin               Int?
  gmatScoreMax               Int?
  minimumGpa                 Float?
  languageTestRequirements   String?
  tuitionFees                Float?
  additionalFees             Float?
  totalCost                  Float?
  currency                   String   @default("USD")
  scholarshipInfo            String?
  financialAidDetails        String?
  admissionsOfficeContact    String?
  internationalOfficeContact String?
  generalInquiriesContact    String?
  websiteUrl                 String?
  metaTitle                  String?
  metaDescription            String?
  metaKeywords               String?
  canonicalUrl               String?
  isActive                   Boolean  @default(true)
  isFeatured                 Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Additional Fields
  averageDeadlines           String?
  studentsPerYear            Int?
  brochureUrl                String?
  additionalDocumentUrls     String[]
  averageProgramLengthMonths Int?
  intakes                    String?

  // Relations
  images            UniversityImage[]
  programs          Program[]
  departments       Department[]
  admissions        Admission[]
  applications      Application[]
  tuitionBreakdowns TuitionBreakdown[]
  scholarships      Scholarship[]
  feeStructures     FeeStructure[]
  financialAids     FinancialAid[]
  savedByUsers      User[] @relation("UserSavedUniversities")
  calendarEvents    CalendarEvent[]
  CV                CV[]

  @@map("universities")
}

model universities_backup {
  id                         String   @id @default(cuid())
  universityName             String
  slug                       String   @unique
  city                       String
  state                      String?
  country                    String
  fullAddress                String?
  shortDescription           String?
  overview                   String?
  history                    String?
  missionStatement           String?
  visionStatement            String?
  accreditationDetails       String?
  whyChooseHighlights        String[]
  careerOutcomes             String?
  ftGlobalRanking            Int?
  ftRegionalRanking          Int?
  ftRankingYear              Int?
  usNewsRanking              Int?
  qsRanking                  Int?
  timesRanking               Int?
  acceptanceRate             Float?
  gmatAverageScore           Int?
  gmatScoreMin               Int?
  gmatScoreMax               Int?
  minimumGpa                 Float?
  languageTestRequirements   String?
  tuitionFees                Float?
  additionalFees             Float?
  totalCost                  Float?
  currency                   String   @default("USD")
  scholarshipInfo            String?
  financialAidDetails        String?
  admissionsOfficeContact    String?
  internationalOfficeContact String?
  generalInquiriesContact    String?
  websiteUrl                 String?
  metaTitle                  String?
  metaDescription            String?
  metaKeywords               String?
  canonicalUrl               String?
  isActive                   Boolean  @default(true)
  isFeatured                 Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Additional Fields
  averageDeadlines           String?
  studentsPerYear            Int?
  brochureUrl                String?
  additionalDocumentUrls     String[]
  averageProgramLengthMonths Int?
  intakes                    String?

  @@map("universities_backup")
}

model UniversityImage {
  id           String   @id @default(cuid())
  universityId String
  imageUrl     String
  imageType    String?
  imageTitle   String?
  imageAltText String
  imageCaption String?
  fileSize     Int?
  width        Int?
  height       Int?
  isPrimary    Boolean  @default(false)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@map("university_images")
}

// Junction table for many-to-many Program-Department relationship
model ProgramDepartment {
  id           String @id @default(cuid())
  programId    String
  departmentId String
  createdAt    DateTime @default(now())

  // Relations
  program    Program    @relation(fields: [programId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([programId, departmentId])
  @@index([departmentId])
  @@index([programId])
  @@map("program_departments")
}

model Department {
  id           String   @id @default(cuid())
  universityId String
  name         String
  slug         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  university University          @relation(fields: [universityId], references: [id], onDelete: Cascade)
  programs   ProgramDepartment[] // Changed from direct Program relation

  @@unique([universityId, slug])
  @@index([universityId])
  @@map("departments")
}

model Program {
  id                     String   @id @default(cuid())
  universityId           String
  programName            String
  programSlug            String   @unique
  degreeType             String?
  programLength          Int?
  specializations        String?
  programDescription     String?
  curriculumOverview     String?
  admissionRequirements  String?
  averageEntranceScore   Float?
  programTuitionFees     Float?
  programAdditionalFees  Float?
  programMetaTitle       String?
  programMetaDescription String?
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  university        University         @relation(fields: [universityId], references: [id], onDelete: Cascade)
  departments       ProgramDepartment[] // Many-to-many through junction table
  syllabus          Syllabus?
  rankings          ProgramRanking[]
  externalLinks     ExternalLink[]
  admissions        Admission[]
  applications      Application[]
  tuitionBreakdowns TuitionBreakdown[]
  scholarships      Scholarship[]
  feeStructures     FeeStructure[]
  financialAids     FinancialAid[]
  essayPrompts      EssayPrompt[]
  calendarEvents    CalendarEvent[]
  essays            Essay[]
  CV                CV[]

  @@index([universityId])
  @@map("programs")
}

model programs_backup {
  id                     String   @id @default(cuid())
  universityId           String
  programName            String
  programSlug            String   @unique
  degreeType             String?
  programLength          Int?
  specializations        String?
  programDescription     String?
  curriculumOverview     String?
  admissionRequirements  String?
  averageEntranceScore   Float?
  programTuitionFees     Float?
  programAdditionalFees  Float?
  programMetaTitle       String?
  programMetaDescription String?
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("programs_backup")
}

model Syllabus {
  id         String   @id @default(cuid())
  programId  String   @unique
  fileUrl    String // PDF URL (S3 or similar)
  uploadedAt DateTime @default(now())

  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@map("syllabi")
}

model ProgramRanking {
  id        String   @id @default(cuid())
  programId String
  year      Int
  rank      Int
  source    String? // Optional: QS, THE, etc.
  createdAt DateTime @default(now())

  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, year])
  @@map("program_rankings")
}

model ExternalLink {
  id        String   @id @default(cuid())
  programId String
  title     String
  url       String
  createdAt DateTime @default(now())

  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@map("external_links")
}

// ==================== ADMISSIONS MODELS ====================

model Admission {
  id           String @id @default(cuid())
  universityId String
  programId    String

  // Academic Requirements
  minimumGpa       Float?
  maximumGpa       Float?
  gmatMinScore     Int?
  gmatMaxScore     Int?
  gmatAverageScore Int?
  greMinScore      Int?
  greMaxScore      Int?
  greAverageScore  Int?

  // Language Requirements
  ieltsMinScore      Float?
  toeflMinScore      Int?
  pteMinScore        Int?
  duolingoMinScore   Int?
  languageExemptions String? // JSON string for exemption criteria

  // Experience Requirements
  workExperienceRequired Boolean @default(false)
  minWorkExperience      Int? // in months
  maxWorkExperience      Int? // in months
  preferredIndustries    String? // JSON array of industries

  // Application Requirements
  applicationFee         Float?
  currency               String  @default("USD")
  documentsRequired      String? // JSON array of required documents
  additionalRequirements String? // Essay, portfolio, etc.

  // Admission Statistics
  acceptanceRate    Float?
  totalApplications Int?
  totalAccepted     Int?
  statisticsYear    Int?

  // Status
  isActive        Boolean @default(true)
  admissionStatus String  @default("OPEN") // OPEN, CLOSED, WAITLIST

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  university        University          @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program           Program             @relation(fields: [programId], references: [id], onDelete: Cascade)
  intakes           Intake[]
  deadlines         AdmissionDeadline[]
  applications      Application[]
  essayPrompts      EssayPrompt[]
  calendarEvents    CalendarEvent[]

  @@unique([universityId, programId])
  @@map("admissions")
}

model Intake {
  id          String @id @default(cuid())
  admissionId String

  // Intake Information
  intakeName  String // Spring 2024, Fall 2024, etc.
  intakeType  String // SPRING, FALL, SUMMER, WINTER
  intakeYear  Int
  intakeMonth Int // 1-12

  // Capacity
  totalSeats         Int?
  availableSeats     Int?
  internationalSeats Int?
  domesticSeats      Int?

  // Dates
  startDate            DateTime? // When classes start
  endDate              DateTime? // When classes end
  applicationOpenDate  DateTime? // When applications open
  applicationCloseDate DateTime? // When applications close

  // Status
  isActive     Boolean @default(true)
  intakeStatus String  @default("UPCOMING") // UPCOMING, ONGOING, COMPLETED, CANCELLED

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admission         Admission           @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  deadlines         AdmissionDeadline[]
  applications      Application[]
  essayPrompts      EssayPrompt[]
  calendarEvents    CalendarEvent[]

  @@unique([admissionId, intakeType, intakeYear])
  @@map("intakes")
}

model AdmissionDeadline {
  id          String  @id @default(cuid())
  admissionId String
  intakeId    String? // Optional: can be general deadline or intake-specific

  // Deadline Information
  deadlineType String // APPLICATION, DOCUMENT_SUBMISSION, INTERVIEW, DECISION, etc.
  deadlineDate DateTime
  deadlineTime String? // HH:MM format
  timezone     String   @default("UTC")

  // Details
  title            String
  description      String?
  isExtended       Boolean   @default(false)
  originalDeadline DateTime? // If deadline was extended

  // Priority and Status
  priority String  @default("MEDIUM") // HIGH, MEDIUM, LOW
  isActive Boolean @default(true)

  // Notifications
  reminderSent Boolean   @default(false)
  reminderDate DateTime?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admission       Admission @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  intake          Intake?   @relation(fields: [intakeId], references: [id], onDelete: Cascade)
  calendarEvents  CalendarEvent[]

  @@map("admission_deadlines")
}

model Application {
  id           String  @id @default(cuid())
  admissionId  String
  universityId String
  programId    String
  intakeId     String?
  userId       String? // If user is logged in

  // Applicant Information (for non-logged in users)
  firstName   String
  lastName    String
  email       String
  phone       String?
  dateOfBirth DateTime?
  nationality String?

  // Academic Information
  currentGpa    Float?
  gmatScore     Int?
  greScore      Int?
  ieltsScore    Float?
  toeflScore    Int?
  pteScore      Int?
  duolingoScore Int?

  // Experience
  workExperienceMonths  Int?
  workExperienceDetails String?

  // Enhanced Application Status
  applicationStatus    String   @default("DRAFT") // DRAFT, IN_PROGRESS, DOCUMENTS_PENDING, DOCUMENTS_COMPLETE, SUBMITTED, UNDER_REVIEW, INTERVIEW_SCHEDULED, INTERVIEW_COMPLETED, DECISION_PENDING, ACCEPTED, REJECTED, WAITLISTED, DEFERRED
  currentStage         String   @default("DRAFT") // DOCUMENT_COLLECTION, DOCUMENT_REVIEW, INTERVIEW, FINAL_REVIEW, DECISION
  stageUpdatedAt       DateTime @default(now())
  completionPercentage Float    @default(0.0)

  // Deadline Management
  nextDeadlineId     String? // Reference to upcoming deadline
  completedDeadlines String? // JSON array of completed deadline IDs
  missedDeadlines    String? // JSON array of missed deadline IDs

  // Application Dates
  submissionDate DateTime?
  reviewDate     DateTime?
  decisionDate   DateTime?
  lastActivityAt DateTime  @default(now())

  // Financial
  applicationFeesPaid   Boolean @default(false)
  applicationFeesAmount Float?

  // Documents
  documentsUploaded String? // JSON array of uploaded document IDs
  documentsVerified Boolean @default(false)

  // Communication
  lastContactDate DateTime?
  contactNotes    String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admission                Admission                 @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  university               University                @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program                  Program                   @relation(fields: [programId], references: [id], onDelete: Cascade)
  intake                   Intake?                   @relation(fields: [intakeId], references: [id], onDelete: Cascade)
  user                     User?                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents                ApplicationDocument[]
  applicationProgress      ApplicationProgress[]
  interviews               Interview[]
  scholarshipApplications  ScholarshipApplication[]
  financialAidApplications FinancialAidApplication[]
  essaySubmissions         EssaySubmission[]
  calendarEvents           CalendarEvent[]
  essays                   Essay[]

  @@map("applications")
}

model ApplicationProgress {
  id            String    @id @default(cuid())
  applicationId String
  stageName     String // DOCUMENT_COLLECTION, DOCUMENT_REVIEW, INTERVIEW, etc.
  stageStatus   String // PENDING, IN_PROGRESS, COMPLETED, SKIPPED
  startedAt     DateTime?
  completedAt   DateTime?
  notes         String?
  completedBy   String? // Admin user ID
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, stageName])
  @@map("application_progress")
}

model ApplicationDocument {
  id            String @id @default(cuid())
  applicationId String

  // Document Information
  documentType     String // TRANSCRIPT, RESUME, SOP, LOR, etc.
  documentCategory String // ACADEMIC, PERSONAL, FINANCIAL, PROFESSIONAL
  documentTitle    String
  fileName         String
  fileUrl          String
  fileSize         Int?
  mimeType         String?

  // Requirements
  isRequired         Boolean   @default(false)
  submissionDeadline DateTime?
  reminderSent       Boolean   @default(false)

  // Verification
  isVerified        Boolean   @default(false)
  verifiedBy        String? // Admin user ID
  verifiedAt        DateTime?
  verificationNotes String?

  // Status
  documentStatus String @default("PENDING") // PENDING, VERIFIED, REJECTED, NEEDS_REVISION

  // Metadata
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_documents")
}

model Interview {
  id            String @id @default(cuid())
  applicationId String

  // Interview Details
  interviewType String // PHONE, VIDEO, IN_PERSON
  scheduledDate DateTime?
  scheduledTime String? // HH:MM format
  timezone      String    @default("UTC")
  duration      Int? // in minutes

  // Interview Information
  interviewerName  String?
  interviewerEmail String?
  meetingLink      String?
  meetingPassword  String?
  location         String? // For in-person interviews

  // Status and Results
  interviewStatus   String  @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED, NO_SHOW
  interviewScore    Float?
  interviewFeedback String?

  // Communication
  reminderSent         Boolean @default(false)
  confirmationReceived Boolean @default(false)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  application     Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  calendarEvents  CalendarEvent[]

  @@map("interviews")
}

// ==================== FINANCIAL MODELS ====================

model TuitionBreakdown {
  id                  String    @id @default(cuid())
  universityId        String
  programId           String?
  academicYear        String
  yearNumber          Int
  baseTuition         Float
  labFees             Float?    @default(0)
  libraryFees         Float?    @default(0)
  technologyFees      Float?    @default(0)
  activityFees        Float?    @default(0)
  healthInsurance     Float?    @default(0)
  dormitoryFees       Float?    @default(0)
  mealPlanFees        Float?    @default(0)
  applicationFee      Float?    @default(0)
  registrationFee     Float?    @default(0)
  examFees            Float?    @default(0)
  graduationFee       Float?    @default(0)
  totalTuition        Float
  totalAdditionalFees Float
  grandTotal          Float
  currency            String    @default("USD")
  currencySymbol      String    @default("$")
  paymentTerms        String?
  installmentCount    Int?      @default(1)
  isActive            Boolean   @default(true)
  effectiveDate       DateTime  @default(now())
  expiryDate          DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  university      University        @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program         Program?          @relation(fields: [programId], references: [id], onDelete: Cascade)
  paymentSchedule PaymentSchedule[]

  @@unique([universityId, programId, academicYear, yearNumber])
  @@map("tuition_breakdowns")
}

model PaymentSchedule {
  id                 String   @id @default(cuid())
  tuitionBreakdownId String
  installmentNumber  Int
  dueDate            DateTime
  amount             Float
  description        String?
  lateFee            Float?   @default(0)
  gracePeroidDays    Int?     @default(0)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  tuitionBreakdown TuitionBreakdown @relation(fields: [tuitionBreakdownId], references: [id], onDelete: Cascade)

  @@map("payment_schedules")
}

model Scholarship {
  id                   String    @id @default(cuid())
  universityId         String
  programId            String?
  scholarshipName      String
  scholarshipSlug      String
  scholarshipType      String
  description          String?
  eligibilityCriteria  String?
  amount               Float?
  percentage           Float?
  maxAmount            Float?
  currency             String    @default("USD")
  coverageTuition      Boolean   @default(false)
  coverageFees         Boolean   @default(false)
  coverageLiving       Boolean   @default(false)
  coverageBooks        Boolean   @default(false)
  applicationRequired  Boolean   @default(true)
  applicationDeadline  DateTime?
  documentsRequired    String?
  totalAvailable       Int?
  currentlyAwarded     Int?      @default(0)
  minimumGpa           Float?
  minimumTestScore     Int?
  testType             String?
  citizenshipRequired  String?
  isActive             Boolean   @default(true)
  applicationOpenDate  DateTime?
  applicationCloseDate DateTime?
  awardDate            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  university         University               @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program            Program?                 @relation(fields: [programId], references: [id], onDelete: Cascade)
  documents          ScholarshipDocument[]
  applications       ScholarshipApplication[]
  calendarEvents     CalendarEvent[]

  @@unique([universityId, scholarshipSlug])
  @@map("scholarships")
}

model ScholarshipDocument {
  id            String   @id @default(cuid())
  scholarshipId String
  documentType  String
  documentTitle String
  fileName      String
  fileUrl       String
  fileSize      Int?
  mimeType      String?
  isRequired    Boolean  @default(false)
  displayOrder  Int      @default(0)
  isPublic      Boolean  @default(true)
  downloadCount Int      @default(0)
  uploadedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@map("scholarship_documents")
}

model ScholarshipApplication {
  id                String    @id @default(cuid())
  scholarshipId     String
  userId            String?
  applicationId     String?
  firstName         String
  lastName          String
  email             String
  phone             String?
  currentGpa        Float?
  testScore         Int?
  testType          String?
  familyIncome      Float?
  financialNeed     String?
  applicationStatus String    @default("DRAFT")
  submissionDate    DateTime?
  reviewDate        DateTime?
  decisionDate      DateTime?
  awardAmount       Float?
  documentsUploaded String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  scholarship Scholarship  @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("scholarship_applications")
}

model FeeStructure {
  id                  String    @id @default(cuid())
  universityId        String
  programId           String?
  structureName       String
  structureType       String
  academicYear        String
  tuitionFee          Float
  admissionFee        Float?    @default(0)
  registrationFee     Float?    @default(0)
  examFee             Float?    @default(0)
  libraryFee          Float?    @default(0)
  labFee              Float?    @default(0)
  hostelFee           Float?    @default(0)
  messFee             Float?    @default(0)
  transportFee        Float?    @default(0)
  sportsFee           Float?    @default(0)
  medicalFee          Float?    @default(0)
  healthInsurance     Float?    @default(0)
  accidentInsurance   Float?    @default(0)
  studentActivityFee  Float?    @default(0)
  technologyFee       Float?    @default(0)
  securityDeposit     Float?    @default(0)
  cautionMoney        Float?    @default(0)
  isDepositRefundable Boolean   @default(true)
  totalMandatoryFees  Float
  totalOptionalFees   Float
  grandTotal          Float
  currency            String    @default("USD")
  currencySymbol      String    @default("$")
  paymentTerms        String?
  installmentCount    Int?      @default(1)
  isActive            Boolean   @default(true)
  effectiveDate       DateTime  @default(now())
  expiryDate          DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program    Program?   @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([universityId, programId, structureType, academicYear])
  @@map("fee_structures")
}

model FinancialAid {
  id                   String    @id @default(cuid())
  universityId         String
  programId            String?
  aidName              String
  aidType              String
  description          String?
  amount               Float?
  percentage           Float?
  maxAmount            Float?
  currency             String    @default("USD")
  interestRate         Float?
  repaymentPeriod      Int?
  gracePeriod          Int?
  eligibilityCriteria  String?
  minimumGpa           Float?
  maximumFamilyIncome  Float?
  citizenshipRequired  String?
  applicationRequired  Boolean   @default(true)
  applicationDeadline  DateTime?
  documentsRequired    String?
  isActive             Boolean   @default(true)
  applicationOpenDate  DateTime?
  applicationCloseDate DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  university   University                @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program      Program?                  @relation(fields: [programId], references: [id], onDelete: Cascade)
  applications FinancialAidApplication[]

  @@map("financial_aids")
}

model FinancialAidApplication {
  id                String    @id @default(cuid())
  financialAidId    String
  userId            String?
  applicationId     String?
  firstName         String
  lastName          String
  email             String
  phone             String?
  familyIncome      Float?
  assets            Float?
  liabilities       Float?
  dependents        Int?      @default(0)
  applicationStatus String    @default("DRAFT")
  submissionDate    DateTime?
  reviewDate        DateTime?
  decisionDate      DateTime?
  approvedAmount    Float?
  documentsUploaded String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  financialAid FinancialAid @relation(fields: [financialAidId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application  Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("financial_aid_applications")
}

// ==================== ADMIN USER MODELS ====================

model Admin_User {
  id                  String    @id @default(cuid())
  email               String    @unique
  passwordHash        String
  firstName           String
  lastName            String
  role                String    @default("ADMIN") // ADMIN, STAFF, SUPER_ADMIN
  status              String    @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED, PENDING
  is2FAEnabled        Boolean   @default(false)
  twoFactorSecret     String?
  phone               String? // Optional contact info
  profileImageUrl     String? // Optional profile picture
  lastLogin           DateTime?
  lastLoginIP         String? // For logging IP of last login
  failedLoginAttempts Int       @default(0) // Useful for account lockout protection
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  refreshTokens RefreshToken[]

  @@map("admin_users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  adminUser Admin_User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ==================== ESSAY MODELS ====================

model EssayPrompt {
  id           String   @id @default(cuid())
  admissionId  String?
  programId    String?
  intakeId     String?
  promptTitle  String
  promptText   String
  wordLimit    Int
  minWordCount Int      @default(0)
  isMandatory  Boolean  @default(true)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  admission   Admission?        @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  program     Program?          @relation(fields: [programId], references: [id], onDelete: Cascade)
  intake      Intake?           @relation(fields: [intakeId], references: [id], onDelete: Cascade)
  submissions EssaySubmission[]
  essays      Essay[]

  @@index([programId])
  @@map("essay_prompts")
}

model essay_prompts_backup {
  id           String   @id @default(cuid())
  admissionId  String?
  programId    String?
  intakeId     String?
  promptTitle  String
  promptText   String
  wordLimit    Int
  minWordCount Int      @default(0)
  isMandatory  Boolean  @default(true)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("essay_prompts_backup")
}

model EssaySubmission {
  id             String    @id @default(cuid())
  essayPromptId  String
  userId         String?
  applicationId  String?
  title          String?
  content        String
  wordCount      Int
  status         String    @default("DRAFT") // DRAFT, SUBMITTED, UNDER_REVIEW, ACCEPTED, REJECTED
  submissionDate DateTime?
  lastEditedAt   DateTime  @default(now())

  // Draft Template Details
  isUsingTemplate Boolean @default(false)
  templateVersion String? // Optional version name

  // Feedback & Rating
  reviewStatus    String? @default("PENDING") // PENDING, REVIEWED
  reviewerId      String? // Admin reviewer
  reviewerComment String?
  internalRating  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  essayPrompt EssayPrompt  @relation(fields: [essayPromptId], references: [id], onDelete: Cascade)
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("essay_submissions")
}

model Essay {
  id               String   @id @default(cuid())
  userId           String?
  applicationId    String?
  programId        String
  essayPromptId    String?
  
  // Essay Content
  title            String
  content          String   @default("")
  wordCount        Int      @default(0)
  wordLimit        Int      @default(500)
  
  // Status and Priority
  status           String   @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETED, SUBMITTED
  priority         String   @default("medium") // high, medium, low
  
  // Completion tracking
  isCompleted      Boolean  @default(false)
  completedAt      DateTime?
  completionPercentage Float @default(0.0) // 0-100
  
  // Metadata
  lastModified     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Auto-save tracking
  lastAutoSaved    DateTime @default(now())
  autoSaveEnabled  Boolean  @default(true)

  // Relations
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  application     Application?    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  program         Program         @relation(fields: [programId], references: [id], onDelete: Cascade)
  essayPrompt     EssayPrompt?     @relation(fields: [essayPromptId], references: [id], onDelete: Cascade)
  versions        EssayVersion[]
  aiResults       AIResult[]
  completionLogs  EssayCompletionLog[]

  @@unique([userId, programId, essayPromptId])
  @@map("essays")
}

model EssayVersion {
  id          String   @id @default(cuid())
  essayId     String
  
  // Version Content
  content     String
  wordCount   Int
  label       String   // User-defined label like "Draft 1", "Final Version"
  
  // Version Metadata
  timestamp   DateTime @default(now())
  isAutoSave  Boolean  @default(false) // Distinguish manual saves from auto-saves
  
  // Version Comparison
  changesSinceLastVersion String? // Brief description of changes
  
  // Relations
  essay     Essay      @relation(fields: [essayId], references: [id], onDelete: Cascade)
  aiResults AIResult[]

  @@index([essayId, timestamp])
  @@map("essay_versions")
}

model AIResult {
  id              String   @id @default(cuid())
  essayId         String
  essayVersionId  String?  // Optional: AI result for specific version
  
  // AI Analysis Type
  analysisType    String   // suggestions, grammar_check, readability, structure, completion
  
  // AI Result Data
  overallScore    Float?   // 0-100 quality score
  suggestions     String   // JSON array of suggestion objects
  strengths       String?  // JSON array of identified strengths
  improvements    String?  // JSON array of improvement areas
  warnings        String?  // JSON array of critical issues
  
  // AI Provider Info
  aiProvider      String   @default("gemini") // gemini, openai, claude
  modelUsed       String?  // model version used
  promptVersion   String?  // version of analysis prompt used
  
  // Processing Status
  status          String   @default("completed") // processing, completed, failed
  processingTime  Int?     // milliseconds taken to generate
  errorMessage    String?  // If analysis failed
  
  // Content Analysis Metrics
  readabilityScore     Float?
  sentenceCount        Int?
  paragraphCount       Int?
  avgSentenceLength    Float?
  complexWordCount     Int?
  passiveVoiceCount    Int?
  structureScore       Float?
  contentRelevance     Float?
  narrativeFlow        Float?
  leadershipEmphasis   Float?
  specificityScore     Float?
  grammarIssues        Int?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  essay        Essay         @relation(fields: [essayId], references: [id], onDelete: Cascade)
  essayVersion EssayVersion? @relation(fields: [essayVersionId], references: [id], onDelete: Cascade)

  @@index([essayId, analysisType])
  @@index([essayVersionId])
  @@map("ai_results")
}

// Essay completion log table
model EssayCompletionLog {
  id          String   @id @default(cuid())
  essayId     String
  userId      String?
  
  // Completion details
  completedAt       DateTime @default(now())
  wordCountAtCompletion Int
  wordLimit         Int
  completionMethod  String   // AUTO, MANUAL
  previousStatus    String?  // Previous status before completion
  
  // Context
  programId         String?
  universityId      String?
  essayPromptTitle  String?
  
  // Metadata
  createdAt         DateTime @default(now())

  // Relations
  essay Essay @relation(fields: [essayId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("essay_completion_logs")
}

// ==================== CALENDAR MODELS ====================

model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String?  // Event owner (optional for system-generated events)
  
  // Event Basic Information
  title       String
  description String?
  location    String?
  
  // Date & Time
  startDate   DateTime
  endDate     DateTime
  timezone    String   @default("UTC")
  isAllDay    Boolean  @default(false)
  
  // Event Classification
  eventType   String   // deadline, interview, task, workshop, meeting, reminder, system
  eventStatus String   @default("active") // active, completed, cancelled, postponed
  priority    String   @default("medium") // low, medium, high, critical
  
  // Application Context (optional relations)
  universityId        String?
  programId           String?
  applicationId       String?
  admissionId         String?
  intakeId            String?
  admissionDeadlineId String?
  interviewId         String?
  scholarshipId       String?
  
  // Event Properties
  isRecurring         Boolean @default(false)
  recurringPattern    String? // JSON string for recurrence rules
  parentEventId       String? // For recurring event instances
  
  // Reminder and Notification Settings
  hasReminders        Boolean @default(true)
  isSystemGenerated   Boolean @default(false) // Auto-created from deadlines, etc.
  
  // Display Properties
  color               String? // Hex color code for event display
  isVisible           Boolean @default(true)
  
  // Completion Tracking
  completionStatus    String  @default("pending") // pending, in_progress, completed, missed
  completedAt         DateTime?
  completionNotes     String?
  
  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastModifiedBy      String? // User ID who last modified

  // Relations
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  university        University?        @relation(fields: [universityId], references: [id], onDelete: Cascade)
  program           Program?           @relation(fields: [programId], references: [id], onDelete: Cascade)
  application       Application?       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  admission         Admission?         @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  intake            Intake?            @relation(fields: [intakeId], references: [id], onDelete: Cascade)
  admissionDeadline AdmissionDeadline? @relation(fields: [admissionDeadlineId], references: [id], onDelete: Cascade)
  interview         Interview?         @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  scholarship       Scholarship?       @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)
  reminders         EventReminder[]

  @@index([parentEventId])
  @@map("calendar_events")
}

model EventReminder {
  id              String   @id @default(cuid())
  eventId         String
  userId          String
  
  // Reminder Configuration
  reminderType    String   // email, push, sms, in_app
  reminderTime    Int      // Minutes before event (e.g., 1440 = 24 hours)
  reminderMessage String?  // Custom reminder message
  
  // Scheduling
  scheduledFor    DateTime // Calculated reminder send time
  
  // Status Tracking
  isActive        Boolean  @default(true)
  isSent          Boolean  @default(false)
  sentAt          DateTime?
  failureReason   String?  // If reminder failed to send
  retryCount      Int      @default(0)
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  event CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId, reminderTime, reminderType])
  @@map("event_reminders")
}

// ==================== CV BUILDER MODELS ====================

model CV {
  id        String   @id @default(cuid())
  userId    String
  
  // CV Basic Information
  title     String   // e.g., "Software Engineering CV - Google"
  slug      String   @unique
  
  // CV Metadata
  isActive  Boolean  @default(false) // Only one CV can be active at a time
  isPublic  Boolean  @default(false)
  
  // Target Information
  targetUniversityId String?
  targetProgramId    String?
  targetCompany      String? // For job applications
  targetPosition     String? // For job applications
  
  // Template & Styling
  templateId         String   @default("modern")
  colorScheme        String   @default("blue")
  fontSize           Int      @default(11)
  customCSS          String?
  
  // Completion Status
  completionPercentage Float  @default(0.0)
  sectionsCompleted    String[] // Array of completed section IDs
  
  // ATS Score
  atsScore             Float?
  lastATSCheckAt       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetUniversity    University?       @relation(fields: [targetUniversityId], references: [id], onDelete: SetNull)
  targetProgram       Program?          @relation(fields: [targetProgramId], references: [id], onDelete: SetNull)
  
  personalInfo        CVPersonalInfo?
  educations          CVEducation[]
  experiences         CVExperience[]
  projects            CVProject[]
  skills              CVSkill[]
  achievements        CVAchievement[]
  volunteers          CVVolunteer[]
  versions            CVVersion[]
  aiAnalysis          CVAIAnalysis[]
  exports             CVExport[]

  @@unique([userId, slug])
  @@index([userId, isActive])
  @@map("cvs")
}

model CVPersonalInfo {
  id        String   @id @default(cuid())
  cvId      String   @unique
  
  // Basic Information
  fullName  String
  email     String
  phone     String?
  location  String?
  
  // Professional Links
  website   String?
  linkedin  String?
  github    String?
  portfolio String?
  
  // Professional Summary
  summary   String?
  headline  String? // Short professional tagline
  
  // Profile Image
  profileImageUrl String?
  
  // Display Settings
  showPhoto       Boolean @default(false)
  showLocation    Boolean @default(true)
  showPhone       Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("cv_personal_info")
}

model CVEducation {
  id     String @id @default(cuid())
  cvId   String
  
  // Education Details
  institution     String
  degree          String  // Bachelor's, Master's, PhD, etc.
  fieldOfStudy    String
  location        String?
  
  // Dates
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean  @default(false)
  
  // Academic Performance
  gpa             String?
  gpaScale        String?  // e.g., "4.0", "100"
  
  // Additional Information
  description     String?
  coursework      String[] // Relevant coursework
  honors          String[] // Honors and awards
  
  // Display Settings
  showGpa         Boolean  @default(true)
  displayOrder    Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, displayOrder])
  @@map("cv_educations")
}

model CVExperience {
  id        String   @id @default(cuid())
  cvId      String
  
  // Experience Details
  company   String
  position  String
  location  String?
  
  // Dates
  startDate DateTime
  endDate   DateTime?
  isCurrent Boolean  @default(false)
  
  // Description
  description   String?   // Full description
  achievements  String[]  // Bullet points of achievements
  
  // Skills & Technologies
  skillsUsed    String[]  // Technologies, tools, frameworks
  
  // Display Settings
  displayOrder  Int       @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, displayOrder])
  @@map("cv_experiences")
}

model CVProject {
  id          String   @id @default(cuid())
  cvId        String
  
  // Project Details
  name        String
  description String
  
  // Technologies
  technologies String[] // React, Node.js, Python, etc.
  
  // Dates
  startDate   DateTime?
  endDate     DateTime?
  
  // Links
  githubUrl   String?
  liveUrl     String?
  demoUrl     String?
  
  // Achievements
  achievements String[] // Key achievements and impact
  
  // Display Settings
  displayOrder Int      @default(0)
  isFeatured   Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, displayOrder])
  @@map("cv_projects")
}

model CVSkill {
  id           String   @id @default(cuid())
  cvId         String
  
  // Skill Details
  categoryName String   // Programming Languages, Frameworks, Tools, Soft Skills
  skills       String[] // Array of skills in this category
  
  // Proficiency
  proficiencyLevel String? // Beginner, Intermediate, Advanced, Expert
  
  // Display Settings
  displayOrder Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, displayOrder])
  @@map("cv_skills")
}

model CVAchievement {
  id            String    @id @default(cuid())
  cvId          String
  
  // Achievement Details
  title         String
  organization  String?
  type          String    // academic, certification, competition, scholarship, publication, etc.
  date          DateTime?
  
  // Description
  description   String?
  impact        String?   // Quantified impact or significance
  
  // Display Settings
  displayOrder  Int       @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, displayOrder])
  @@map("cv_achievements")
}

model CVVolunteer {
  id            String    @id @default(cuid())
  cvId          String
  
  // Volunteer Details
  organization  String
  role          String?
  location      String?
  
  // Dates
  startDate     DateTime
  endDate       DateTime?
  isCurrent     Boolean   @default(false)
  
  // Description
  description   String?
  activities    String[]  // Key activities and responsibilities
  impact        String?   // Measurable impact
  
  // Display Settings
  displayOrder  Int       @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, displayOrder])
  @@map("cv_volunteers")
}

model CVVersion {
  id        String   @id @default(cuid())
  cvId      String
  
  // Version Information
  versionNumber   Int
  versionLabel    String   // "Draft 1", "Google Application", "Final Version"
  
  // Snapshot Data (JSON snapshots of all CV sections)
  personalInfoSnapshot   String?
  educationSnapshot      String?
  experienceSnapshot     String?
  projectsSnapshot       String?
  skillsSnapshot         String?
  achievementsSnapshot   String?
  volunteerSnapshot      String?
  
  // Version Metadata
  changeDescription String?
  isAutoSave        Boolean  @default(false)
  isBookmarked      Boolean  @default(false)
  
  // Template Settings Snapshot
  templateId        String
  colorScheme       String
  
  createdAt DateTime @default(now())
  
  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@unique([cvId, versionNumber])
  @@index([cvId, createdAt])
  @@map("cv_versions")
}

model CVAIAnalysis {
  id        String   @id @default(cuid())
  cvId      String
  
  // Analysis Type
  analysisType    String   // overall, section_specific, ats_check, grammar, content_quality
  sectionName     String?  // If section-specific analysis
  
  // AI Results
  overallScore    Float?   // 0-100
  atsScore        Float?
  
  // Detailed Feedback (JSON)
  suggestions     String   // JSON array of suggestions
  strengths       String?  // JSON array of strengths
  improvements    String?  // JSON array of improvements
  warnings        String?  // JSON array of critical issues
  
  // Content Metrics
  wordCount              Int?
  readabilityScore       Float?
  keywordMatching        String? // JSON object with keyword analysis
  sentenceComplexity     Float?
  actionVerbCount        Int?
  quantificationCount    Int?   // Number of quantified achievements
  
  // ATS Analysis
  atsKeywords            String? // JSON array of detected keywords
  atsMissingKeywords     String? // JSON array of missing keywords
  atsFormattingIssues    String? // JSON array of formatting issues
  
  // AI Provider Info
  aiProvider      String   @default("gemini")
  modelUsed       String?
  promptVersion   String?
  processingTime  Int?     // milliseconds
  
  // Status
  status          String   @default("completed") // processing, completed, failed
  errorMessage    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, analysisType])
  @@index([cvId, createdAt])
  @@map("cv_ai_analysis")
}

model CVExport {
  id        String   @id @default(cuid())
  cvId      String
  
  // Export Details
  exportFormat    String   // pdf, docx, txt, html
  fileName        String
  fileUrl         String?
  fileSize        Int?
  
  // Export Settings
  templateUsed    String
  colorScheme     String
  includePhoto    Boolean  @default(false)
  pageCount       Int?
  
  // Download Tracking
  downloadCount   Int      @default(0)
  lastDownloadAt  DateTime?
  
  // Status
  status          String   @default("completed") // processing, completed, failed
  errorMessage    String?
  
  createdAt DateTime @default(now())
  
  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId, createdAt])
  @@map("cv_exports")
}

// CV Template Configuration (for admin/system)
model CVTemplate {
  id          String   @id @default(cuid())
  
  // Template Information
  name        String   @unique
  slug        String   @unique
  description String?
  
  // Template Design
  thumbnail   String?
  category    String   // modern, classic, creative, minimal, academic
  
  // Template Settings (JSON)
  defaultStyles      String  // JSON with default font, colors, spacing
  layoutStructure    String  // JSON with section layout configuration
  
  // Availability
  isPremium   Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Usage Stats
  usageCount  Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cv_templates")
}