
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  image: 'image',
  password: 'password',
  provider: 'provider',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  countries: 'countries',
  courses: 'courses',
  studyLevel: 'studyLevel',
  gpa: 'gpa',
  testScores: 'testScores',
  workExperience: 'workExperience',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plan: 'plan',
  status: 'status',
  billingCycle: 'billingCycle',
  trialStartDate: 'trialStartDate',
  trialEndDate: 'trialEndDate',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  plan: 'plan',
  amount: 'amount',
  currency: 'currency',
  stripeEventId: 'stripeEventId',
  createdAt: 'createdAt'
};

exports.Prisma.UniversityScalarFieldEnum = {
  id: 'id',
  universityName: 'universityName',
  slug: 'slug',
  city: 'city',
  state: 'state',
  country: 'country',
  fullAddress: 'fullAddress',
  shortDescription: 'shortDescription',
  overview: 'overview',
  history: 'history',
  missionStatement: 'missionStatement',
  visionStatement: 'visionStatement',
  accreditationDetails: 'accreditationDetails',
  whyChooseHighlights: 'whyChooseHighlights',
  careerOutcomes: 'careerOutcomes',
  ftGlobalRanking: 'ftGlobalRanking',
  ftRegionalRanking: 'ftRegionalRanking',
  ftRankingYear: 'ftRankingYear',
  usNewsRanking: 'usNewsRanking',
  qsRanking: 'qsRanking',
  timesRanking: 'timesRanking',
  acceptanceRate: 'acceptanceRate',
  gmatAverageScore: 'gmatAverageScore',
  gmatScoreMin: 'gmatScoreMin',
  gmatScoreMax: 'gmatScoreMax',
  minimumGpa: 'minimumGpa',
  languageTestRequirements: 'languageTestRequirements',
  tuitionFees: 'tuitionFees',
  additionalFees: 'additionalFees',
  totalCost: 'totalCost',
  currency: 'currency',
  scholarshipInfo: 'scholarshipInfo',
  financialAidDetails: 'financialAidDetails',
  admissionsOfficeContact: 'admissionsOfficeContact',
  internationalOfficeContact: 'internationalOfficeContact',
  generalInquiriesContact: 'generalInquiriesContact',
  websiteUrl: 'websiteUrl',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords',
  canonicalUrl: 'canonicalUrl',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  averageDeadlines: 'averageDeadlines',
  studentsPerYear: 'studentsPerYear',
  brochureUrl: 'brochureUrl',
  additionalDocumentUrls: 'additionalDocumentUrls',
  averageProgramLengthMonths: 'averageProgramLengthMonths',
  intakes: 'intakes'
};

exports.Prisma.UniversityImageScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  imageUrl: 'imageUrl',
  imageType: 'imageType',
  imageTitle: 'imageTitle',
  imageAltText: 'imageAltText',
  imageCaption: 'imageCaption',
  fileSize: 'fileSize',
  width: 'width',
  height: 'height',
  isPrimary: 'isPrimary',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt'
};

exports.Prisma.ProgramDepartmentScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  departmentId: 'departmentId',
  createdAt: 'createdAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  programName: 'programName',
  programSlug: 'programSlug',
  degreeType: 'degreeType',
  programLength: 'programLength',
  specializations: 'specializations',
  programDescription: 'programDescription',
  curriculumOverview: 'curriculumOverview',
  admissionRequirements: 'admissionRequirements',
  averageEntranceScore: 'averageEntranceScore',
  programTuitionFees: 'programTuitionFees',
  programAdditionalFees: 'programAdditionalFees',
  programMetaTitle: 'programMetaTitle',
  programMetaDescription: 'programMetaDescription',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyllabusScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  fileUrl: 'fileUrl',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ProgramRankingScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  year: 'year',
  rank: 'rank',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.ExternalLinkScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  title: 'title',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.AdmissionScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  programId: 'programId',
  minimumGpa: 'minimumGpa',
  maximumGpa: 'maximumGpa',
  gmatMinScore: 'gmatMinScore',
  gmatMaxScore: 'gmatMaxScore',
  gmatAverageScore: 'gmatAverageScore',
  greMinScore: 'greMinScore',
  greMaxScore: 'greMaxScore',
  greAverageScore: 'greAverageScore',
  ieltsMinScore: 'ieltsMinScore',
  toeflMinScore: 'toeflMinScore',
  pteMinScore: 'pteMinScore',
  duolingoMinScore: 'duolingoMinScore',
  languageExemptions: 'languageExemptions',
  workExperienceRequired: 'workExperienceRequired',
  minWorkExperience: 'minWorkExperience',
  maxWorkExperience: 'maxWorkExperience',
  preferredIndustries: 'preferredIndustries',
  applicationFee: 'applicationFee',
  currency: 'currency',
  documentsRequired: 'documentsRequired',
  additionalRequirements: 'additionalRequirements',
  acceptanceRate: 'acceptanceRate',
  totalApplications: 'totalApplications',
  totalAccepted: 'totalAccepted',
  statisticsYear: 'statisticsYear',
  isActive: 'isActive',
  admissionStatus: 'admissionStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntakeScalarFieldEnum = {
  id: 'id',
  admissionId: 'admissionId',
  intakeName: 'intakeName',
  intakeType: 'intakeType',
  intakeYear: 'intakeYear',
  intakeMonth: 'intakeMonth',
  totalSeats: 'totalSeats',
  availableSeats: 'availableSeats',
  internationalSeats: 'internationalSeats',
  domesticSeats: 'domesticSeats',
  startDate: 'startDate',
  endDate: 'endDate',
  applicationOpenDate: 'applicationOpenDate',
  applicationCloseDate: 'applicationCloseDate',
  isActive: 'isActive',
  intakeStatus: 'intakeStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdmissionDeadlineScalarFieldEnum = {
  id: 'id',
  admissionId: 'admissionId',
  intakeId: 'intakeId',
  deadlineType: 'deadlineType',
  deadlineDate: 'deadlineDate',
  deadlineTime: 'deadlineTime',
  timezone: 'timezone',
  title: 'title',
  description: 'description',
  isExtended: 'isExtended',
  originalDeadline: 'originalDeadline',
  priority: 'priority',
  isActive: 'isActive',
  reminderSent: 'reminderSent',
  reminderDate: 'reminderDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  admissionId: 'admissionId',
  universityId: 'universityId',
  programId: 'programId',
  intakeId: 'intakeId',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  nationality: 'nationality',
  currentGpa: 'currentGpa',
  gmatScore: 'gmatScore',
  greScore: 'greScore',
  ieltsScore: 'ieltsScore',
  toeflScore: 'toeflScore',
  pteScore: 'pteScore',
  duolingoScore: 'duolingoScore',
  workExperienceMonths: 'workExperienceMonths',
  workExperienceDetails: 'workExperienceDetails',
  applicationStatus: 'applicationStatus',
  currentStage: 'currentStage',
  stageUpdatedAt: 'stageUpdatedAt',
  completionPercentage: 'completionPercentage',
  nextDeadlineId: 'nextDeadlineId',
  completedDeadlines: 'completedDeadlines',
  missedDeadlines: 'missedDeadlines',
  submissionDate: 'submissionDate',
  reviewDate: 'reviewDate',
  decisionDate: 'decisionDate',
  lastActivityAt: 'lastActivityAt',
  applicationFeesPaid: 'applicationFeesPaid',
  applicationFeesAmount: 'applicationFeesAmount',
  documentsUploaded: 'documentsUploaded',
  documentsVerified: 'documentsVerified',
  lastContactDate: 'lastContactDate',
  contactNotes: 'contactNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationProgressScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  stageName: 'stageName',
  stageStatus: 'stageStatus',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  notes: 'notes',
  completedBy: 'completedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationDocumentScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  documentType: 'documentType',
  documentCategory: 'documentCategory',
  documentTitle: 'documentTitle',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isRequired: 'isRequired',
  submissionDeadline: 'submissionDeadline',
  reminderSent: 'reminderSent',
  isVerified: 'isVerified',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  verificationNotes: 'verificationNotes',
  documentStatus: 'documentStatus',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  interviewType: 'interviewType',
  scheduledDate: 'scheduledDate',
  scheduledTime: 'scheduledTime',
  timezone: 'timezone',
  duration: 'duration',
  interviewerName: 'interviewerName',
  interviewerEmail: 'interviewerEmail',
  meetingLink: 'meetingLink',
  meetingPassword: 'meetingPassword',
  location: 'location',
  interviewStatus: 'interviewStatus',
  interviewScore: 'interviewScore',
  interviewFeedback: 'interviewFeedback',
  reminderSent: 'reminderSent',
  confirmationReceived: 'confirmationReceived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TuitionBreakdownScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  programId: 'programId',
  academicYear: 'academicYear',
  yearNumber: 'yearNumber',
  baseTuition: 'baseTuition',
  labFees: 'labFees',
  libraryFees: 'libraryFees',
  technologyFees: 'technologyFees',
  activityFees: 'activityFees',
  healthInsurance: 'healthInsurance',
  dormitoryFees: 'dormitoryFees',
  mealPlanFees: 'mealPlanFees',
  applicationFee: 'applicationFee',
  registrationFee: 'registrationFee',
  examFees: 'examFees',
  graduationFee: 'graduationFee',
  totalTuition: 'totalTuition',
  totalAdditionalFees: 'totalAdditionalFees',
  grandTotal: 'grandTotal',
  currency: 'currency',
  currencySymbol: 'currencySymbol',
  paymentTerms: 'paymentTerms',
  installmentCount: 'installmentCount',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScheduleScalarFieldEnum = {
  id: 'id',
  tuitionBreakdownId: 'tuitionBreakdownId',
  installmentNumber: 'installmentNumber',
  dueDate: 'dueDate',
  amount: 'amount',
  description: 'description',
  lateFee: 'lateFee',
  gracePeroidDays: 'gracePeroidDays',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScholarshipScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  programId: 'programId',
  scholarshipName: 'scholarshipName',
  scholarshipSlug: 'scholarshipSlug',
  scholarshipType: 'scholarshipType',
  description: 'description',
  eligibilityCriteria: 'eligibilityCriteria',
  amount: 'amount',
  percentage: 'percentage',
  maxAmount: 'maxAmount',
  currency: 'currency',
  coverageTuition: 'coverageTuition',
  coverageFees: 'coverageFees',
  coverageLiving: 'coverageLiving',
  coverageBooks: 'coverageBooks',
  applicationRequired: 'applicationRequired',
  applicationDeadline: 'applicationDeadline',
  documentsRequired: 'documentsRequired',
  totalAvailable: 'totalAvailable',
  currentlyAwarded: 'currentlyAwarded',
  minimumGpa: 'minimumGpa',
  minimumTestScore: 'minimumTestScore',
  testType: 'testType',
  citizenshipRequired: 'citizenshipRequired',
  isActive: 'isActive',
  applicationOpenDate: 'applicationOpenDate',
  applicationCloseDate: 'applicationCloseDate',
  awardDate: 'awardDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScholarshipDocumentScalarFieldEnum = {
  id: 'id',
  scholarshipId: 'scholarshipId',
  documentType: 'documentType',
  documentTitle: 'documentTitle',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isRequired: 'isRequired',
  displayOrder: 'displayOrder',
  isPublic: 'isPublic',
  downloadCount: 'downloadCount',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScholarshipApplicationScalarFieldEnum = {
  id: 'id',
  scholarshipId: 'scholarshipId',
  userId: 'userId',
  applicationId: 'applicationId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  currentGpa: 'currentGpa',
  testScore: 'testScore',
  testType: 'testType',
  familyIncome: 'familyIncome',
  financialNeed: 'financialNeed',
  applicationStatus: 'applicationStatus',
  submissionDate: 'submissionDate',
  reviewDate: 'reviewDate',
  decisionDate: 'decisionDate',
  awardAmount: 'awardAmount',
  documentsUploaded: 'documentsUploaded',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeeStructureScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  programId: 'programId',
  structureName: 'structureName',
  structureType: 'structureType',
  academicYear: 'academicYear',
  tuitionFee: 'tuitionFee',
  admissionFee: 'admissionFee',
  registrationFee: 'registrationFee',
  examFee: 'examFee',
  libraryFee: 'libraryFee',
  labFee: 'labFee',
  hostelFee: 'hostelFee',
  messFee: 'messFee',
  transportFee: 'transportFee',
  sportsFee: 'sportsFee',
  medicalFee: 'medicalFee',
  healthInsurance: 'healthInsurance',
  accidentInsurance: 'accidentInsurance',
  studentActivityFee: 'studentActivityFee',
  technologyFee: 'technologyFee',
  securityDeposit: 'securityDeposit',
  cautionMoney: 'cautionMoney',
  isDepositRefundable: 'isDepositRefundable',
  totalMandatoryFees: 'totalMandatoryFees',
  totalOptionalFees: 'totalOptionalFees',
  grandTotal: 'grandTotal',
  currency: 'currency',
  currencySymbol: 'currencySymbol',
  paymentTerms: 'paymentTerms',
  installmentCount: 'installmentCount',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinancialAidScalarFieldEnum = {
  id: 'id',
  universityId: 'universityId',
  programId: 'programId',
  aidName: 'aidName',
  aidType: 'aidType',
  description: 'description',
  amount: 'amount',
  percentage: 'percentage',
  maxAmount: 'maxAmount',
  currency: 'currency',
  interestRate: 'interestRate',
  repaymentPeriod: 'repaymentPeriod',
  gracePeriod: 'gracePeriod',
  eligibilityCriteria: 'eligibilityCriteria',
  minimumGpa: 'minimumGpa',
  maximumFamilyIncome: 'maximumFamilyIncome',
  citizenshipRequired: 'citizenshipRequired',
  applicationRequired: 'applicationRequired',
  applicationDeadline: 'applicationDeadline',
  documentsRequired: 'documentsRequired',
  isActive: 'isActive',
  applicationOpenDate: 'applicationOpenDate',
  applicationCloseDate: 'applicationCloseDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinancialAidApplicationScalarFieldEnum = {
  id: 'id',
  financialAidId: 'financialAidId',
  userId: 'userId',
  applicationId: 'applicationId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  familyIncome: 'familyIncome',
  assets: 'assets',
  liabilities: 'liabilities',
  dependents: 'dependents',
  applicationStatus: 'applicationStatus',
  submissionDate: 'submissionDate',
  reviewDate: 'reviewDate',
  decisionDate: 'decisionDate',
  approvedAmount: 'approvedAmount',
  documentsUploaded: 'documentsUploaded',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Admin_UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  status: 'status',
  is2FAEnabled: 'is2FAEnabled',
  twoFactorSecret: 'twoFactorSecret',
  phone: 'phone',
  profileImageUrl: 'profileImageUrl',
  lastLogin: 'lastLogin',
  lastLoginIP: 'lastLoginIP',
  failedLoginAttempts: 'failedLoginAttempts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.EssayPromptScalarFieldEnum = {
  id: 'id',
  admissionId: 'admissionId',
  programId: 'programId',
  intakeId: 'intakeId',
  promptTitle: 'promptTitle',
  promptText: 'promptText',
  wordLimit: 'wordLimit',
  minWordCount: 'minWordCount',
  isMandatory: 'isMandatory',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EssaySubmissionScalarFieldEnum = {
  id: 'id',
  essayPromptId: 'essayPromptId',
  userId: 'userId',
  applicationId: 'applicationId',
  title: 'title',
  content: 'content',
  wordCount: 'wordCount',
  status: 'status',
  submissionDate: 'submissionDate',
  lastEditedAt: 'lastEditedAt',
  isUsingTemplate: 'isUsingTemplate',
  templateVersion: 'templateVersion',
  reviewStatus: 'reviewStatus',
  reviewerId: 'reviewerId',
  reviewerComment: 'reviewerComment',
  internalRating: 'internalRating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EssayScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  applicationId: 'applicationId',
  programId: 'programId',
  essayPromptId: 'essayPromptId',
  title: 'title',
  content: 'content',
  wordCount: 'wordCount',
  wordLimit: 'wordLimit',
  status: 'status',
  priority: 'priority',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  completionPercentage: 'completionPercentage',
  lastModified: 'lastModified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastAutoSaved: 'lastAutoSaved',
  autoSaveEnabled: 'autoSaveEnabled'
};

exports.Prisma.EssayVersionScalarFieldEnum = {
  id: 'id',
  essayId: 'essayId',
  content: 'content',
  wordCount: 'wordCount',
  label: 'label',
  timestamp: 'timestamp',
  isAutoSave: 'isAutoSave',
  changesSinceLastVersion: 'changesSinceLastVersion'
};

exports.Prisma.AIResultScalarFieldEnum = {
  id: 'id',
  essayId: 'essayId',
  essayVersionId: 'essayVersionId',
  analysisType: 'analysisType',
  overallScore: 'overallScore',
  suggestions: 'suggestions',
  strengths: 'strengths',
  improvements: 'improvements',
  warnings: 'warnings',
  aiProvider: 'aiProvider',
  modelUsed: 'modelUsed',
  promptVersion: 'promptVersion',
  status: 'status',
  processingTime: 'processingTime',
  errorMessage: 'errorMessage',
  readabilityScore: 'readabilityScore',
  sentenceCount: 'sentenceCount',
  paragraphCount: 'paragraphCount',
  avgSentenceLength: 'avgSentenceLength',
  complexWordCount: 'complexWordCount',
  passiveVoiceCount: 'passiveVoiceCount',
  structureScore: 'structureScore',
  contentRelevance: 'contentRelevance',
  narrativeFlow: 'narrativeFlow',
  leadershipEmphasis: 'leadershipEmphasis',
  specificityScore: 'specificityScore',
  grammarIssues: 'grammarIssues',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EssayCompletionLogScalarFieldEnum = {
  id: 'id',
  essayId: 'essayId',
  userId: 'userId',
  completedAt: 'completedAt',
  wordCountAtCompletion: 'wordCountAtCompletion',
  wordLimit: 'wordLimit',
  completionMethod: 'completionMethod',
  previousStatus: 'previousStatus',
  programId: 'programId',
  universityId: 'universityId',
  essayPromptTitle: 'essayPromptTitle',
  createdAt: 'createdAt'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  timezone: 'timezone',
  isAllDay: 'isAllDay',
  eventType: 'eventType',
  eventStatus: 'eventStatus',
  priority: 'priority',
  universityId: 'universityId',
  programId: 'programId',
  applicationId: 'applicationId',
  admissionId: 'admissionId',
  intakeId: 'intakeId',
  admissionDeadlineId: 'admissionDeadlineId',
  interviewId: 'interviewId',
  scholarshipId: 'scholarshipId',
  isRecurring: 'isRecurring',
  recurringPattern: 'recurringPattern',
  parentEventId: 'parentEventId',
  hasReminders: 'hasReminders',
  isSystemGenerated: 'isSystemGenerated',
  color: 'color',
  isVisible: 'isVisible',
  completionStatus: 'completionStatus',
  completedAt: 'completedAt',
  completionNotes: 'completionNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastModifiedBy: 'lastModifiedBy'
};

exports.Prisma.EventReminderScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  reminderType: 'reminderType',
  reminderTime: 'reminderTime',
  reminderMessage: 'reminderMessage',
  scheduledFor: 'scheduledFor',
  isActive: 'isActive',
  isSent: 'isSent',
  sentAt: 'sentAt',
  failureReason: 'failureReason',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Subscription: 'Subscription',
  PaymentEvent: 'PaymentEvent',
  University: 'University',
  UniversityImage: 'UniversityImage',
  ProgramDepartment: 'ProgramDepartment',
  Department: 'Department',
  Program: 'Program',
  Syllabus: 'Syllabus',
  ProgramRanking: 'ProgramRanking',
  ExternalLink: 'ExternalLink',
  Admission: 'Admission',
  Intake: 'Intake',
  AdmissionDeadline: 'AdmissionDeadline',
  Application: 'Application',
  ApplicationProgress: 'ApplicationProgress',
  ApplicationDocument: 'ApplicationDocument',
  Interview: 'Interview',
  TuitionBreakdown: 'TuitionBreakdown',
  PaymentSchedule: 'PaymentSchedule',
  Scholarship: 'Scholarship',
  ScholarshipDocument: 'ScholarshipDocument',
  ScholarshipApplication: 'ScholarshipApplication',
  FeeStructure: 'FeeStructure',
  FinancialAid: 'FinancialAid',
  FinancialAidApplication: 'FinancialAidApplication',
  Admin_User: 'Admin_User',
  RefreshToken: 'RefreshToken',
  EssayPrompt: 'EssayPrompt',
  EssaySubmission: 'EssaySubmission',
  Essay: 'Essay',
  EssayVersion: 'EssayVersion',
  AIResult: 'AIResult',
  EssayCompletionLog: 'EssayCompletionLog',
  CalendarEvent: 'CalendarEvent',
  EventReminder: 'EventReminder'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
